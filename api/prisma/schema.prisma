
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing application users
model User {
  id            String      @id @default(uuid())
  username      String      @unique
  password      String
  email         String      @unique
  avatar        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  // One-to-many relationship: One user can have multiple teams
  teams         Team[]      @relation("team_creator")
}

// Admin model representing application administrators
model Admin {
  id            String      @id @default(uuid())
  username      String      @unique
  password      String
  role          String      @default("admin") // Define roles (e.g., "admin", "superadmin")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  games         Game[]      @relation("game_creator")

  // Define a relation to approved teams
  approvedTeams Team[]      @relation("approved_teams")
}

// Game model representing games in the application
model Game {
  id          String      @id @default(uuid())
  category    String
  name        String
  description String
  image       String?      @default("/default-game-image.jpg") // Default image path
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  creator     Admin        @relation("game_creator", fields: [creatorId], references: [id])
  creatorId   String
}

// Team model representing teams created by users
model Team {
  id                    String       @id @default(uuid())
  category              String
  name                  String
  img                   String
  numberOfPlayers       Int
  description           String
  availableDaysAndTimes String
  approved              Boolean     @default(false) // Indicates team approval status
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  // Many-to-one relationship: Many teams can belong to one user (creator)
  creator             User         @relation("team_creator", fields: [creatorId], references: [id])
  creatorId           String

  // Define a relation to the approving admin
  approvedBy          Admin?       @relation("approved_teams", fields: [approvedById], references: [id])
  approvedById        String?      // Foreign key to Admin who approved the team
}